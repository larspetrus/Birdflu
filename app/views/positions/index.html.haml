.leftmenu= AlgSet.active.name
.leftmenu= link_to 'Random Position', "positions/#{Random.rand(3916) + 1}"
= render 'find_by_alg'

%hr{style: 'clear:both;'}

%div{style: 'position: absolute; top:32px; right:0px; font-size: 8px;'}
  #{@counts[0]} / #{@counts[1]}
  Cache #{number_to_human_size Rails.cache.instance_variable_get('@cache_size')}

.welcome
  %p
    Welcome to the poorly implemented,
    pre-alpha LL AlgNotDB (aka <I>#{@joke_header}"</I>)!
  %p
    Search by selecting corner/edge configs
    (COP, EO, EP, OLL) to the right. Clicking the
    weird code in the Position column shows
    a page with algs etc for that position.
  %p
    Currently the DB has all <= 15 moves algs (1.7M), and the combinations of all <= 9 move algs.

%table.center
  %tr
    %th COP
    %th EO
    %th EP
    %th OLL
  %tr#pickers
    %td
      #cop-selected= render 'svg_cube', iconf: @active_icons[:cop], size: 44, add_class: 'selected'
      #cop-picker
        %table.icon-grid
          - @icon_grids[:cop].each do |cop_row|
            %tr
              - cop_row.each do |cop|
                %td.icon-grid
                  = render 'svg_cube', iconf: cop, size: 44, add_class: cop.highlight(params[:cop]) if cop
    %td
      #eo-selected= render 'svg_cube', iconf: @active_icons[:eo], size: 44, add_class: 'selected'
      #eo-picker
        %table.icon-grid-h
          - @icon_grids[:eo].each do |eo_row|
            %tr
              - eo_row.each do |eo|
                %td.icon-grid-h
                  = render 'll_icon', pos: eo, add_class: eo.highlight(params[:eo]) if eo
    %td
      #ep-selected= render 'svg_cube', iconf: @active_icons[:ep], size: 44, add_class: 'selected'
      #ep-picker
        %table.icon-grid-h
          - @icon_grids[:ep].each do |ep_row|
            %tr
              - ep_row.each do |ep|
                %td.icon-grid-h
                  = render 'svg_cube', iconf: ep, size: 44, add_class: ep.highlight(params[:ep]) if ep
    %td
      #oll-selected= render 'svg_cube', iconf: @active_icons[:oll], size: 44, add_class: 'selected'
      #oll-picker
        %table.icon-grid-h
          - @icon_grids[:oll].each do |oll_row|
            %tr
              - oll_row.each do |oll|
                %td.icon-grid-h
                  = render 'll_icon', pos: oll, add_class: oll.highlight(params[:oll]) if oll

%br{clear: 'both'}

=form_tag url_for(controller: "positions", action: "index"), method: 'get', id: 'icon-picker' do
  =hidden_field_tag(:oll, @db_query[:oll])
  =hidden_field_tag(:cop, @db_query[:cop])
  =hidden_field_tag(:eo,  @db_query[:eo])
  =hidden_field_tag(:ep,  @db_query[:ep])

%h4
  Selected #{@position_count} of the #{Position.count} LL positions.
  - if @position_count != @positions.count
    Showing first #{@positions.count}
%h5 Average optimal solve: #{@optimal_average}, Optimal combo solve: #{@combo_average}, Alg set combo solve: #{@algset_average}

%table.index
  %th Position
  %th COP
  %th EO
  %th EP
  %th OLL
  %th Solutions
  %th{colspan: 2} Optimal Solution

  - @positions.each do |pos|
    - cache([pos.ll_code, pos.alg_count], skip_digest: true) do
      - best = pos.best_alg || OpenStruct.new
      - best_combo = pos.best_combo_alg || OpenStruct.new
      %tr
        %td= link_to pos.display_name, "positions/#{pos.ll_code}"
        %td= render 'svg_cube', iconf: Icons::Cop.for(pos), size: 25, label: ''
        %td= render 'svg_cube', iconf: Icons::Eo.for(pos),  size: 25, label: ''
        %td= render 'svg_cube', iconf: Icons::Ep.for(pos),  size: 25, label: ''
        %td= render 'svg_cube', iconf: Icons::Oll.for(pos), size: 25, label: ''
        %td.num= pos.alg_count
        %td.num.optimal= best.length
        %td=best.moves

:javascript
  $('.ll-icon, .svg-icon').on('click', function() {
    var field = $(this).data('field');
    if (field === '#cop' || field === '#oll') {
      $('#eo, #ep').val('');
    }
    $(field).val($(this).data('code'));
    $('form#icon-picker').submit();
  });

  function opts(specifics, field) {
    var close_on_mouse_exit = function(){
      $('.ui-widget-overlay').bind('mouseenter', function(){
        $(field+'-picker').dialog('close');
      });
    };
    var pos = { my: 'center top', at: 'center top', of: '#pickers' };
    return $.extend(specifics, {resizable: false, modal: true, position: pos, open: close_on_mouse_exit});
  }
  $('#oll-selected').on('mouseover', function() {
    $('#oll-picker').dialog(opts({ width: '580px', title: 'Corner and edge orientation (OLL)'}, '#oll'));
  });
  $('#cop-selected').on('mouseover', function() {
    $('#cop-picker').dialog(opts({ width: '460px', title: 'Corner orientation and position (COP)'}, '#cop'));
  });
  $('#eo-selected').on('mouseover', function() {
    $('#eo-picker').dialog(opts({ width: '479px', title: 'Edge orientation (EO)'}, '#eo'));
  });
  $('#ep-selected').on('mouseover', function() {
    $('#ep-picker').dialog(opts({ width: '562px', title: 'Edge position (EP)'}, '#ep'));
  });
