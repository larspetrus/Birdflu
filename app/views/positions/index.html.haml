.leftmenu= link_to 'Random Position', "positions/#{Position.random_id}"
= render 'find_by_alg'

.leftmenu{style: 'float: right;'}
  #about-link Aboutâ€¦

%hr{style: 'clear:both;'}

.left_side_stats{class: @single_position ? '' : 'positions-stats'}
  %span#headline= @stats.headline
  - if @single_position
    %span#headline_prot
  %table
    - @stats.sections[0].each do |line|
      %tr
        %td= line.label
        %td{class: line.class_name}= line.text
    %tr.spacer
    - @stats.sections[1].each do |line|
      %tr
        %td= line.label
        %td{class: line.class_name}= line.text
  - if @stats.link_section
    .spacer
    - @stats.link_section.each do |link_line|
      %div
        = link_line[:label]
        - link_line[:links].each do |one_link|
          .link= one_link

%div{style: 'position: fixed; bottom:4px; right:4px; font-size: 8px; color: #bbb;'}
  Cache #{number_to_human_size Rails.cache.instance_variable_get('@cache_size')}
  | PID #{Process.pid}

%table.center
  %tr
    - [:COP, :OLL, '', :CO, :CP, :EO, :EP].each do |header|
      %th= header
  %tr#pickers
    = render 'picker_td', prop: :cop, add_class: 'grid-lines'
    = render 'picker_td', prop: :oll, add_class: 'grid-lines'
    %td{style: 'border-right: solid 1px #bbb;'}
    = render 'picker_td', prop: :co
    = render 'picker_td', prop: :cp
    = render 'picker_td', prop: :eo
    = render 'picker_td', prop: :ep,  add_class: 'relative', ubl_text: true
.rotation-ui
  %h1
    %span rotate
  .buttons
    %a{class: 'show-pig', onclick: "rotate_page(1);"} U
    %a{class: 'show-pig', onclick: "rotate_page(2);"} U2
    %a{class: 'show-pig', onclick: "rotate_page(-1);"} U'

-if @single_position
  %div{style: "width: 216px; position: absolute; top:24px; right:-24px;"}
    = render 'cube_icon', icon: Icons::Big.new(@single_position), size: 192, pad: true, label: '', add_class: 'illustration-llicon'


=form_tag url_for(controller: "positions", action: "index"), method: 'get', id: 'main-form' do
  - Fields::FILTER_NAMES.each do |f|
    =hidden_field_tag(f, @filters.as_params[f])
  =hidden_field_tag(:clicked, 'none')

  .page-controls
    - unless @single_position
      .center.page-format-header
        Show as
        =Fields::LIST.as_tag(@format)
    - else
      =hidden_field_tag(Fields::LIST.name, Fields::LIST.value(@format))

  - if @list_algs
    .center.algs-list-header
      Show first
      =Fields::LINES.as_tag(@format)
      algs

      .right
        Sort by
        =Fields::SORTBY.as_tag(@format)

- flags = @list_algs ? -> (alg) do {shortest: alg.length == @stats.data.shortest, fastest: alg.speed == @stats.data.fastest, selected_pos_ids: @position_ids} end : -> (pos) do {} end
%table{class: @list_algs ? 'algs-list' : 'positions-list'}
  - @columns.each do |column|
    %th= column.header
  - @list_items.each do |item|
    %tr{class: item.matches(@hi_lite) ? 'hilite' : ''}
      - @columns.each do |column|
        - if column.is_svg
          %td= render 'cube_icon', column.svg_config.call(item, flags)
        -else
          =column.td(item, flags.call(item))

#show-alg{style: 'height:200px; width:200px;'}
#about-box
  %p This site aims to contain all knowledge of algorithms and positions for the last layer of Rubik's Cube, and present it in simple and useful ways. That will take a while.
  %p For now is has all algs up to 15 moves (1.69 million), and some basic features. More to come.
  %p Hand crafted by Lars Petrus in Oakland 2015-16.

:javascript
  $('.ui-llicon, .random, .unselect').on('click', function() {
    var field = $(this).data('field');

    $(field).val($(this).data('code'));
    $('#clicked').val(field);
    $('form#main-form').submit();
  });

  $("#{Fields::FORMATS.map{|f| f.as_css_id}.join(', ')}").change(function() {
    $('form#main-form').submit();
  });

  // --- SVG ROTATION SECTION ---

  var u_transpositions = {
     1: { R: 'F', F: 'L', L: 'B', B: 'R' },
     2: { R: 'L', F: 'B', L: 'R', B: 'F' },
     3: { R: 'B', F: 'R', L: 'F', B: 'L' },
  }
  function rotate_all_algs(diff) {
    var d0123 = (diff + 4) % 4
    if (d0123 > 0) {
      var u_transposition = u_transpositions[d0123]
      $('.alg').text(function(i, current_text){
        result = ''
        for (var i = 0, len = current_text.length; i < len; i++) {
          result += u_transposition[current_text[i]] || current_text[i]
        }
        return result
      });
    }
  }

  function spin_svgs(diff, progress) {
    $('svg g').attr("transform", "rotate(" + (page_rotation*90 + diff*90*progress) + ", 50, 50)");
  }

  function adjust_pos_name() {
    $('#headline_prot').text(['', '+U', '+U2', "+U'"][page_rotation]);
  }

  var page_rotation = #{@page_rotation}; // Global state
  if (page_rotation > 0) {
    adjust_pos_name();
    spin_svgs(0, 0);
    rotate_all_algs(page_rotation);
  };

  function adjust_url() {
    var old_url = window.location.search;
    var new_prot = 'prot=' + page_rotation;
    if (old_url.indexOf('prot') != -1) {
      history.replaceState('', '', old_url.replace(/prot=./, new_prot));
    } else {
      var sep = old_url.indexOf('?') == -1 ? '?' : '&';
      history.replaceState('', '', old_url + sep + new_prot)
    }
  }

  function rotate_page(diff) {
    var algs_rotated = false;
    $('body').animate({ dummyAttr: '20px' },
      {
        duration:400,
        progress: function(animation, progress) {
          spin_svgs(diff, progress);

          var gray = Math.floor(400.0 * (0.5 - Math.abs(progress - 0.5)));
          $('.alg').attr("style", "color: rgb("+gray+","+gray+","+gray+");");

          if (progress > 0.5 && !algs_rotated) {
            rotate_all_algs(diff);
            algs_rotated = true;
          }
        },
        complete: function() {
          page_rotation = (page_rotation + diff + 4) % 4
          adjust_url();
          adjust_pos_name();
          $('.alg').removeAttr("style");
        }
      }
    );
  }

  $(document).on('keypress', function(event) {
    if (event.keyCode === 44) { rotate_page(-1); } // comma = 44
    if (event.keyCode === 46) { rotate_page(+1); } // period = 46
    if (event.keyCode === 47) { rotate_page(+2); } // slash = 47
  });



- if Rails.env == 'production'
  :javascript
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-1030049-2', 'auto');
    ga('send', 'pageview');
